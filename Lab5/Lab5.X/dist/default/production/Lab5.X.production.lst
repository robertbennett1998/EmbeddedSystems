

Microchip MPLAB XC8 Assembler V2.10 build 88905656 
                                                                                               Mon Oct 14 17:31:26 2019

Microchip MPLAB XC8 C Compiler v2.10 (Free license) build 20190730164152 Og1 
     1                           	processor	16F877A
     2                           	opt	pw 120
     3                           	opt	flic
     4                           	psect	cinit,global,class=CODE,merge=1,delta=2
     5                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
     6                           	psect	maintext,global,class=CODE,split=1,delta=2
     7                           	psect	text1,local,class=CODE,merge=1,delta=2
     8                           	psect	text2,local,class=CODE,merge=1,delta=2
     9                           	psect	text3,local,class=CODE,merge=1,delta=2
    10                           	psect	text4,local,class=CODE,merge=1,delta=2
    11                           	dabs	1,0x7E,2
    12  0000                     
    13                           ; Version 2.10
    14                           ; Generated 31/07/2019 GMT
    15                           ; 
    16                           ; Copyright Â© 2019, Microchip Technology Inc. and its subsidiaries ("Microchip")
    17                           ; All rights reserved.
    18                           ; 
    19                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    20                           ; 
    21                           ; Redistribution and use in source and binary forms, with or without modification, are
    22                           ; permitted provided that the following conditions are met:
    23                           ; 
    24                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    25                           ;        conditions and the following disclaimer.
    26                           ; 
    27                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    28                           ;        of conditions and the following disclaimer in the documentation and/or other
    29                           ;        materials provided with the distribution.
    30                           ; 
    31                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    32                           ;        software without specific prior written permission.
    33                           ; 
    34                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    35                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    36                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    37                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    38                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    39                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    40                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    41                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    42                           ; 
    43                           ; 
    44                           ; Code-generator required, PIC16F877A Definitions
    45                           ; 
    46                           ; SFR Addresses
    47  0000                     	;# 
    48  0001                     	;# 
    49  0002                     	;# 
    50  0003                     	;# 
    51  0004                     	;# 
    52  0005                     	;# 
    53  0006                     	;# 
    54  0007                     	;# 
    55  0008                     	;# 
    56  0009                     	;# 
    57  000A                     	;# 
    58  000B                     	;# 
    59  000C                     	;# 
    60  000D                     	;# 
    61  000E                     	;# 
    62  000E                     	;# 
    63  000F                     	;# 
    64  0010                     	;# 
    65  0011                     	;# 
    66  0012                     	;# 
    67  0013                     	;# 
    68  0014                     	;# 
    69  0015                     	;# 
    70  0015                     	;# 
    71  0016                     	;# 
    72  0017                     	;# 
    73  0018                     	;# 
    74  0019                     	;# 
    75  001A                     	;# 
    76  001B                     	;# 
    77  001B                     	;# 
    78  001C                     	;# 
    79  001D                     	;# 
    80  001E                     	;# 
    81  001F                     	;# 
    82  0081                     	;# 
    83  0085                     	;# 
    84  0086                     	;# 
    85  0087                     	;# 
    86  0088                     	;# 
    87  0089                     	;# 
    88  008C                     	;# 
    89  008D                     	;# 
    90  008E                     	;# 
    91  0091                     	;# 
    92  0092                     	;# 
    93  0093                     	;# 
    94  0094                     	;# 
    95  0098                     	;# 
    96  0099                     	;# 
    97  009C                     	;# 
    98  009D                     	;# 
    99  009E                     	;# 
   100  009F                     	;# 
   101  010C                     	;# 
   102  010D                     	;# 
   103  010E                     	;# 
   104  010F                     	;# 
   105  018C                     	;# 
   106  018D                     	;# 
   107  0000                     	;# 
   108  0001                     	;# 
   109  0002                     	;# 
   110  0003                     	;# 
   111  0004                     	;# 
   112  0005                     	;# 
   113  0006                     	;# 
   114  0007                     	;# 
   115  0008                     	;# 
   116  0009                     	;# 
   117  000A                     	;# 
   118  000B                     	;# 
   119  000C                     	;# 
   120  000D                     	;# 
   121  000E                     	;# 
   122  000E                     	;# 
   123  000F                     	;# 
   124  0010                     	;# 
   125  0011                     	;# 
   126  0012                     	;# 
   127  0013                     	;# 
   128  0014                     	;# 
   129  0015                     	;# 
   130  0015                     	;# 
   131  0016                     	;# 
   132  0017                     	;# 
   133  0018                     	;# 
   134  0019                     	;# 
   135  001A                     	;# 
   136  001B                     	;# 
   137  001B                     	;# 
   138  001C                     	;# 
   139  001D                     	;# 
   140  001E                     	;# 
   141  001F                     	;# 
   142  0081                     	;# 
   143  0085                     	;# 
   144  0086                     	;# 
   145  0087                     	;# 
   146  0088                     	;# 
   147  0089                     	;# 
   148  008C                     	;# 
   149  008D                     	;# 
   150  008E                     	;# 
   151  0091                     	;# 
   152  0092                     	;# 
   153  0093                     	;# 
   154  0094                     	;# 
   155  0098                     	;# 
   156  0099                     	;# 
   157  009C                     	;# 
   158  009D                     	;# 
   159  009E                     	;# 
   160  009F                     	;# 
   161  010C                     	;# 
   162  010D                     	;# 
   163  010E                     	;# 
   164  010F                     	;# 
   165  018C                     	;# 
   166  018D                     	;# 
   167  0006                     _PORTB	set	6
   168  0005                     _PORTA	set	5
   169  0007                     _PORTC	set	7
   170  0087                     _TRISC	set	135
   171  0086                     _TRISB	set	134
   172  0085                     _TRISA	set	133
   173  009F                     _ADCON1	set	159
   174                           
   175                           ; #config settings
   176  0000                     
   177                           	psect	cinit
   178  07FC                     start_initialization:	
   179  07FC                     __initialization:	
   180  07FC                     end_of_initialization:	
   181                           ;End of C runtime variable initialization code
   182                           
   183  07FC                     __end_of__initialization:	
   184  07FC  0183               	clrf	3
   185  07FD  120A  118A  2FA6   	ljmp	_main	;jump to C main() function
   186                           
   187                           	psect	cstackCOMMON
   188  0070                     __pcstackCOMMON:	
   189  0070                     ?_SetBitHigh:	
   190  0070                     ?_SetBitLow:	
   191                           ; 1 bytes @ 0x0
   192                           
   193  0070                     ?_IsBitSet:	
   194                           ; 1 bytes @ 0x0
   195                           
   196  0070                     ?_main:	
   197                           ; 1 bytes @ 0x0
   198                           
   199  0070                     IsBitSet@byBitOffset:	
   200                           ; 1 bytes @ 0x0
   201                           
   202  0070                     SetBitHigh@byValue:	
   203                           ; 1 bytes @ 0x0
   204                           
   205  0070                     SetBitLow@byValue:	
   206                           ; 2 bytes @ 0x0
   207                           
   208                           
   209                           ; 2 bytes @ 0x0
   210  0070                     	ds	1
   211  0071                     ??_IsBitSet:	
   212                           
   213                           ; 1 bytes @ 0x1
   214  0071                     	ds	1
   215  0072                     SetBitHigh@byBitOffset:	
   216  0072                     SetBitLow@byBitOffset:	
   217                           ; 1 bytes @ 0x2
   218                           
   219  0072                     IsBitSet@byValue:	
   220                           ; 1 bytes @ 0x2
   221                           
   222                           
   223                           ; 1 bytes @ 0x2
   224  0072                     	ds	1
   225  0073                     ??_SetBitHigh:	
   226  0073                     ??_SetBitLow:	
   227                           ; 1 bytes @ 0x3
   228                           
   229                           
   230                           ; 1 bytes @ 0x3
   231  0073                     	ds	2
   232  0075                     ?_SetBit:	
   233  0075                     SetBit@byValue:	
   234                           ; 1 bytes @ 0x5
   235                           
   236                           
   237                           ; 2 bytes @ 0x5
   238  0075                     	ds	2
   239  0077                     SetBit@byBitOffset:	
   240                           
   241                           ; 1 bytes @ 0x7
   242  0077                     	ds	1
   243  0078                     SetBit@byBitValue:	
   244                           
   245                           ; 1 bytes @ 0x8
   246  0078                     	ds	1
   247  0079                     ??_SetBit:	
   248                           
   249                           ; 1 bytes @ 0x9
   250  0079                     	ds	1
   251  007A                     ??_main:	
   252                           
   253                           ; 1 bytes @ 0xA
   254  007A                     	ds	3
   255  007D                     main@i:	
   256                           
   257                           ; 1 bytes @ 0xD
   258  007D                     	ds	1
   259                           
   260                           	psect	maintext
   261  07A6                     __pmaintext:	
   262 ;;
   263 ;;Main: autosize = 0, tempsize = 3, incstack = 0, save=0
   264 ;;
   265 ;; *************** function _main *****************
   266 ;; Defined at:
   267 ;;		line 38 in file "main.c"
   268 ;; Parameters:    Size  Location     Type
   269 ;;		None
   270 ;; Auto vars:     Size  Location     Type
   271 ;;  i               1   13[COMMON] unsigned char 
   272 ;; Return value:  Size  Location     Type
   273 ;;                  1    wreg      void 
   274 ;; Registers used:
   275 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   276 ;; Tracked objects:
   277 ;;		On entry : B00/0
   278 ;;		On exit  : 0/0
   279 ;;		Unchanged: 0/0
   280 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   281 ;;      Params:         0       0       0       0       0
   282 ;;      Locals:         1       0       0       0       0
   283 ;;      Temps:          3       0       0       0       0
   284 ;;      Totals:         4       0       0       0       0
   285 ;;Total ram usage:        4 bytes
   286 ;; Hardware stack levels required when called:    2
   287 ;; This function calls:
   288 ;;		_IsBitSet
   289 ;;		_SetBit
   290 ;; This function is called by:
   291 ;;		Startup code after reset
   292 ;; This function uses a non-reentrant model
   293 ;;
   294                           
   295                           
   296                           ;psect for function _main
   297  07A6                     _main:	
   298  07A6                     l680:	
   299                           ;incstack = 0
   300                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   301                           
   302                           
   303                           ;main.c: 40:         for (char i = 0; i < 4; i++)
   304  07A6  3006               	movlw	6
   305  07A7  1683               	bsf	3,5	;RP0=1, select bank1
   306  07A8  1303               	bcf	3,6	;RP1=0, select bank1
   307  07A9  009F               	movwf	31	;volatile
   308                           
   309                           ;main.c: 41:         {
   310  07AA  300F               	movlw	15
   311  07AB  0085               	movwf	5	;volatile
   312                           
   313                           ;main.c: 42:             SetBit(&PORTC, i, IsBitSet(PORTA, i));
   314  07AC  300F               	movlw	15
   315  07AD  0086               	movwf	6	;volatile
   316  07AE                     l682:	
   317                           
   318                           ;main.c: 43:             SetBit(&PORTC, i + 4, IsBitSet(PORTB, i));
   319  07AE  0187               	clrf	7	;volatile
   320  07AF                     l684:	
   321                           
   322                           ;main.c: 44:         }
   323  07AF  1283               	bcf	3,5	;RP0=0, select bank0
   324  07B0  1303               	bcf	3,6	;RP1=0, select bank0
   325  07B1  0185               	clrf	5	;volatile
   326  07B2                     l686:	
   327                           
   328                           ;main.c: 45:     };
   329  07B2  0186               	clrf	6	;volatile
   330  07B3                     l688:	
   331                           
   332                           ;main.c: 46: 
   333  07B3  0187               	clrf	7	;volatile
   334  07B4                     l690:	
   335  07B4  01FD               	clrf	main@i
   336  07B5                     l696:	
   337  07B5  3007               	movlw	7
   338  07B6  00F5               	movwf	SetBit@byValue
   339  07B7  3000               	movlw	0
   340  07B8  00F6               	movwf	SetBit@byValue+1
   341  07B9  087D               	movf	main@i,w
   342  07BA  00FA               	movwf	??_main
   343  07BB  087A               	movf	??_main,w
   344  07BC  00F7               	movwf	SetBit@byBitOffset
   345  07BD  087D               	movf	main@i,w
   346  07BE  00FB               	movwf	??_main+1
   347  07BF  087B               	movf	??_main+1,w
   348  07C0  00F0               	movwf	IsBitSet@byBitOffset
   349  07C1  1283               	bcf	3,5	;RP0=0, select bank0
   350  07C2  1303               	bcf	3,6	;RP1=0, select bank0
   351  07C3  0805               	movf	5,w	;volatile
   352  07C4  120A  118A  2751  120A  118A  	fcall	_IsBitSet
   353  07C9  00FC               	movwf	??_main+2
   354  07CA  087C               	movf	??_main+2,w
   355  07CB  00F8               	movwf	SetBit@byBitValue
   356  07CC  120A  118A  2785  120A  118A  	fcall	_SetBit
   357  07D1  3007               	movlw	7
   358  07D2  00F5               	movwf	SetBit@byValue
   359  07D3  3000               	movlw	0
   360  07D4  00F6               	movwf	SetBit@byValue+1
   361  07D5  087D               	movf	main@i,w
   362  07D6  3E04               	addlw	4
   363  07D7  00FA               	movwf	??_main
   364  07D8  087A               	movf	??_main,w
   365  07D9  00F7               	movwf	SetBit@byBitOffset
   366  07DA  087D               	movf	main@i,w
   367  07DB  00FB               	movwf	??_main+1
   368  07DC  087B               	movf	??_main+1,w
   369  07DD  00F0               	movwf	IsBitSet@byBitOffset
   370  07DE  1283               	bcf	3,5	;RP0=0, select bank0
   371  07DF  1303               	bcf	3,6	;RP1=0, select bank0
   372  07E0  0806               	movf	6,w	;volatile
   373  07E1  120A  118A  2751  120A  118A  	fcall	_IsBitSet
   374  07E6  00FC               	movwf	??_main+2
   375  07E7  087C               	movf	??_main+2,w
   376  07E8  00F8               	movwf	SetBit@byBitValue
   377  07E9  120A  118A  2785  120A  118A  	fcall	_SetBit
   378  07EE                     l698:	
   379  07EE  3001               	movlw	1
   380  07EF  00FA               	movwf	??_main
   381  07F0  087A               	movf	??_main,w
   382  07F1  07FD               	addwf	main@i,f
   383  07F2                     l700:	
   384  07F2  3004               	movlw	4
   385  07F3  027D               	subwf	main@i,w
   386  07F4  1C03               	skipc
   387  07F5  2FF7               	goto	u101
   388  07F6  2FF8               	goto	u100
   389  07F7                     u101:	
   390  07F7  2FB5               	goto	l696
   391  07F8                     u100:	
   392  07F8  2FB4               	goto	l690
   393  07F9  120A  118A  2800   	ljmp	start
   394  07FC                     __end_of_main:	
   395                           
   396                           	psect	text1
   397  0785                     __ptext1:	
   398 ;; *************** function _SetBit *****************
   399 ;; Defined at:
   400 ;;		line 25 in file "main.c"
   401 ;; Parameters:    Size  Location     Type
   402 ;;  byValue         2    5[COMMON] PTR unsigned char 
   403 ;;		 -> PORTC(1), 
   404 ;;  byBitOffset     1    7[COMMON] unsigned char 
   405 ;;  byBitValue      1    8[COMMON] unsigned char 
   406 ;; Auto vars:     Size  Location     Type
   407 ;;		None
   408 ;; Return value:  Size  Location     Type
   409 ;;                  1    wreg      void 
   410 ;; Registers used:
   411 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   412 ;; Tracked objects:
   413 ;;		On entry : 0/0
   414 ;;		On exit  : 0/0
   415 ;;		Unchanged: 0/0
   416 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   417 ;;      Params:         4       0       0       0       0
   418 ;;      Locals:         0       0       0       0       0
   419 ;;      Temps:          1       0       0       0       0
   420 ;;      Totals:         5       0       0       0       0
   421 ;;Total ram usage:        5 bytes
   422 ;; Hardware stack levels used:    1
   423 ;; Hardware stack levels required when called:    1
   424 ;; This function calls:
   425 ;;		_SetBitHigh
   426 ;;		_SetBitLow
   427 ;; This function is called by:
   428 ;;		_main
   429 ;; This function uses a non-reentrant model
   430 ;;
   431                           
   432                           
   433                           ;psect for function _SetBit
   434  0785                     _SetBit:	
   435  0785                     l670:	
   436                           ;incstack = 0
   437                           ; Regs used in _SetBit: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   438                           
   439                           
   440                           ;main.c: 25:     return (byValue >> byBitOffset) & 1U;;main.c: 26: };main.c: 27: 
   441  0785  0878               	movf	SetBit@byBitValue,w
   442  0786  1903               	btfsc	3,2
   443  0787  2F89               	goto	u81
   444  0788  2F8A               	goto	u80
   445  0789                     u81:	
   446  0789  2F98               	goto	l674
   447  078A                     u80:	
   448  078A                     l672:	
   449                           
   450                           ;main.c: 28: void main(void)
   451  078A  0875               	movf	SetBit@byValue,w
   452  078B  00F0               	movwf	SetBitHigh@byValue
   453  078C  0876               	movf	SetBit@byValue+1,w
   454  078D  00F1               	movwf	SetBitHigh@byValue+1
   455  078E  0877               	movf	SetBit@byBitOffset,w
   456  078F  00F9               	movwf	??_SetBit
   457  0790  0879               	movf	??_SetBit,w
   458  0791  00F2               	movwf	SetBitHigh@byBitOffset
   459  0792  120A  118A  275E  120A  118A  	fcall	_SetBitHigh
   460  0797  2FA5               	goto	l25
   461  0798                     l674:	
   462                           
   463                           ;main.c: 30:     ADCON1 = 0b00000110;
   464  0798  0875               	movf	SetBit@byValue,w
   465  0799  00F0               	movwf	SetBitLow@byValue
   466  079A  0876               	movf	SetBit@byValue+1,w
   467  079B  00F1               	movwf	SetBitLow@byValue+1
   468  079C  0877               	movf	SetBit@byBitOffset,w
   469  079D  00F9               	movwf	??_SetBit
   470  079E  0879               	movf	??_SetBit,w
   471  079F  00F2               	movwf	SetBitLow@byBitOffset
   472  07A0  120A  118A  2771  120A  118A  	fcall	_SetBitLow
   473  07A5                     l25:	
   474  07A5  0008               	return
   475  07A6                     __end_of_SetBit:	
   476                           
   477                           	psect	text2
   478  0771                     __ptext2:	
   479 ;; *************** function _SetBitLow *****************
   480 ;; Defined at:
   481 ;;		line 20 in file "main.c"
   482 ;; Parameters:    Size  Location     Type
   483 ;;  byValue         2    0[COMMON] PTR unsigned char 
   484 ;;		 -> PORTC(1), 
   485 ;;  byBitOffset     1    2[COMMON] unsigned char 
   486 ;; Auto vars:     Size  Location     Type
   487 ;;		None
   488 ;; Return value:  Size  Location     Type
   489 ;;                  1    wreg      void 
   490 ;; Registers used:
   491 ;;		wreg, fsr0l, fsr0h, status,2, status,0
   492 ;; Tracked objects:
   493 ;;		On entry : 0/0
   494 ;;		On exit  : 0/0
   495 ;;		Unchanged: 0/0
   496 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   497 ;;      Params:         3       0       0       0       0
   498 ;;      Locals:         0       0       0       0       0
   499 ;;      Temps:          2       0       0       0       0
   500 ;;      Totals:         5       0       0       0       0
   501 ;;Total ram usage:        5 bytes
   502 ;; Hardware stack levels used:    1
   503 ;; This function calls:
   504 ;;		Nothing
   505 ;; This function is called by:
   506 ;;		_SetBit
   507 ;; This function uses a non-reentrant model
   508 ;;
   509                           
   510                           
   511                           ;psect for function _SetBitLow
   512  0771                     _SetBitLow:	
   513  0771                     l668:	
   514                           ;incstack = 0
   515                           ; Regs used in _SetBitLow: [wreg-fsr0h+status,2+status,0]
   516                           
   517                           
   518                           ;main.c: 20:         SetBitLow(byValue, byBitOffset);;main.c: 21: };main.c: 22: 
   519  0771  3001               	movlw	1
   520  0772  00F3               	movwf	??_SetBitLow
   521  0773  0A72               	incf	SetBitLow@byBitOffset,w
   522  0774  2F77               	goto	u74
   523  0775                     u75:	
   524  0775  1003               	clrc
   525  0776  0DF3               	rlf	??_SetBitLow,f
   526  0777                     u74:	
   527  0777  3EFF               	addlw	-1
   528  0778  1D03               	skipz
   529  0779  2F75               	goto	u75
   530  077A  0873               	movf	??_SetBitLow,w
   531  077B  3AFF               	xorlw	255
   532  077C  00F4               	movwf	??_SetBitLow+1
   533  077D  0870               	movf	SetBitLow@byValue,w
   534  077E  0084               	movwf	4
   535  077F  1783               	bsf	3,7
   536  0780  1C71               	btfss	SetBitLow@byValue+1,0
   537  0781  1383               	bcf	3,7
   538  0782  0874               	movf	??_SetBitLow+1,w
   539  0783  0580               	andwf	0,f
   540  0784                     l20:	
   541  0784  0008               	return
   542  0785                     __end_of_SetBitLow:	
   543                           
   544                           	psect	text3
   545  075E                     __ptext3:	
   546 ;; *************** function _SetBitHigh *****************
   547 ;; Defined at:
   548 ;;		line 15 in file "main.c"
   549 ;; Parameters:    Size  Location     Type
   550 ;;  byValue         2    0[COMMON] PTR unsigned char 
   551 ;;		 -> PORTC(1), 
   552 ;;  byBitOffset     1    2[COMMON] unsigned char 
   553 ;; Auto vars:     Size  Location     Type
   554 ;;		None
   555 ;; Return value:  Size  Location     Type
   556 ;;                  1    wreg      void 
   557 ;; Registers used:
   558 ;;		wreg, fsr0l, fsr0h, status,2, status,0
   559 ;; Tracked objects:
   560 ;;		On entry : 0/0
   561 ;;		On exit  : 0/0
   562 ;;		Unchanged: 0/0
   563 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   564 ;;      Params:         3       0       0       0       0
   565 ;;      Locals:         0       0       0       0       0
   566 ;;      Temps:          2       0       0       0       0
   567 ;;      Totals:         5       0       0       0       0
   568 ;;Total ram usage:        5 bytes
   569 ;; Hardware stack levels used:    1
   570 ;; This function calls:
   571 ;;		Nothing
   572 ;; This function is called by:
   573 ;;		_SetBit
   574 ;; This function uses a non-reentrant model
   575 ;;
   576                           
   577                           
   578                           ;psect for function _SetBitHigh
   579  075E                     _SetBitHigh:	
   580  075E                     l666:	
   581                           ;incstack = 0
   582                           ; Regs used in _SetBitHigh: [wreg-fsr0h+status,2+status,0]
   583                           
   584                           
   585                           ;main.c: 15: void SetBit(char* byValue, char byBitOffset, char byBitValue);main.c: 16: {
      +                          ;main.c: 17:     if (byBitValue > 0)
   586  075E  3001               	movlw	1
   587  075F  00F3               	movwf	??_SetBitHigh
   588  0760  0A72               	incf	SetBitHigh@byBitOffset,w
   589  0761  2F64               	goto	u64
   590  0762                     u65:	
   591  0762  1003               	clrc
   592  0763  0DF3               	rlf	??_SetBitHigh,f
   593  0764                     u64:	
   594  0764  3EFF               	addlw	-1
   595  0765  1D03               	skipz
   596  0766  2F62               	goto	u65
   597  0767  0873               	movf	??_SetBitHigh,w
   598  0768  00F4               	movwf	??_SetBitHigh+1
   599  0769  0870               	movf	SetBitHigh@byValue,w
   600  076A  0084               	movwf	4
   601  076B  1783               	bsf	3,7
   602  076C  1C71               	btfss	SetBitHigh@byValue+1,0
   603  076D  1383               	bcf	3,7
   604  076E  0874               	movf	??_SetBitHigh+1,w
   605  076F  0480               	iorwf	0,f
   606  0770                     l17:	
   607  0770  0008               	return
   608  0771                     __end_of_SetBitHigh:	
   609                           
   610                           	psect	text4
   611  0751                     __ptext4:	
   612 ;; *************** function _IsBitSet *****************
   613 ;; Defined at:
   614 ;;		line 33 in file "main.c"
   615 ;; Parameters:    Size  Location     Type
   616 ;;  byValue         1    wreg     unsigned char 
   617 ;;  byBitOffset     1    0[COMMON] unsigned char 
   618 ;; Auto vars:     Size  Location     Type
   619 ;;  byValue         1    2[COMMON] unsigned char 
   620 ;; Return value:  Size  Location     Type
   621 ;;                  1    wreg      unsigned char 
   622 ;; Registers used:
   623 ;;		wreg, status,2, status,0
   624 ;; Tracked objects:
   625 ;;		On entry : 0/0
   626 ;;		On exit  : 0/0
   627 ;;		Unchanged: 0/0
   628 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   629 ;;      Params:         1       0       0       0       0
   630 ;;      Locals:         1       0       0       0       0
   631 ;;      Temps:          1       0       0       0       0
   632 ;;      Totals:         3       0       0       0       0
   633 ;;Total ram usage:        3 bytes
   634 ;; Hardware stack levels used:    1
   635 ;; This function calls:
   636 ;;		Nothing
   637 ;; This function is called by:
   638 ;;		_main
   639 ;; This function uses a non-reentrant model
   640 ;;
   641                           
   642                           
   643                           ;psect for function _IsBitSet
   644  0751                     _IsBitSet:	
   645                           
   646                           ;incstack = 0
   647                           ; Regs used in _IsBitSet: [wreg+status,2+status,0]
   648                           ;IsBitSet@byValue stored from wreg
   649  0751  00F2               	movwf	IsBitSet@byValue
   650  0752                     l676:	
   651                           
   652                           ;main.c: 33:     TRISC = 0x00;;main.c: 34:     PORTA = 0x00;;main.c: 35:     PORTB = 0x0
      +                          0;
   653  0752  0872               	movf	IsBitSet@byValue,w
   654  0753  00F1               	movwf	??_IsBitSet
   655  0754  0A70               	incf	IsBitSet@byBitOffset,w
   656  0755  2F58               	goto	u94
   657  0756                     u95:	
   658  0756  1003               	clrc
   659  0757  0CF1               	rrf	??_IsBitSet,f
   660  0758                     u94:	
   661  0758  3EFF               	addlw	-1
   662  0759  1D03               	skipz
   663  075A  2F56               	goto	u95
   664  075B  0871               	movf	??_IsBitSet,w
   665  075C  3901               	andlw	1
   666  075D                     l28:	
   667  075D  0008               	return
   668  075E                     __end_of_IsBitSet:	
   669  007E                     btemp	set	126	;btemp
   670  007E                     wtemp0	set	126


Data Sizes:
    Strings     0
    Constant    0
    Data        0
    BSS         0
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80      0       0
    BANK1            80      0       0
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    SetBit@byValue	PTR unsigned char  size(2) Largest target is 1
		 -> PORTC(SFR0[1]), 

    SetBitLow@byValue	PTR unsigned char  size(2) Largest target is 1
		 -> PORTC(SFR0[1]), 

    SetBitHigh@byValue	PTR unsigned char  size(2) Largest target is 1
		 -> PORTC(SFR0[1]), 


Critical Paths under _main in COMMON

    _main->_SetBit
    _SetBit->_SetBitHigh
    _SetBit->_SetBitLow

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 4     4      0    1288
                                             10 COMMON     4     4      0
                           _IsBitSet
                             _SetBit
 ---------------------------------------------------------------------------------
 (1) _SetBit                                               5     1      4     958
                                              5 COMMON     5     1      4
                           _IsBitSet (ARG)
                         _SetBitHigh
                          _SetBitLow
 ---------------------------------------------------------------------------------
 (2) _SetBitLow                                            5     2      3     196
                                              0 COMMON     5     2      3
 ---------------------------------------------------------------------------------
 (2) _SetBitHigh                                           5     2      3     196
                                              0 COMMON     5     2      3
 ---------------------------------------------------------------------------------
 (1) _IsBitSet                                             3     2      1     196
                                              0 COMMON     3     2      1
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _IsBitSet
   _SetBit
     _IsBitSet (ARG)
     _SetBitHigh (ARG)
     _SetBitLow (ARG)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      E       E       1      100.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
ABS                  0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
SFR2                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BANK1               50      0       0       7        0.0%
BITBANK3            60      0       0       8        0.0%
BANK3               60      0       0       9        0.0%
BITBANK2            60      0       0      10        0.0%
BANK2               60      0       0      11        0.0%
DATA                 0      0       0      12        0.0%


Microchip Technology PIC Macro Assembler V2.10 build 88905656 
Symbol Table                                                                                   Mon Oct 14 17:31:26 2019

                     l20 0784                       l17 0770                       l25 07A5  
                     l28 075D                       u64 0764                       u80 078A  
                     u65 0762                       u81 0789                       u74 0777  
                     u75 0775                       u94 0758                       u95 0756  
                    l700 07F2                      l670 0785                      l672 078A  
                    l680 07A6                      l666 075E                      l674 0798  
                    l690 07B4                      l682 07AE                      l676 0752  
                    l668 0771                      l684 07AF                      l686 07B2  
                    l696 07B5                      l688 07B3                      l698 07EE  
                    u100 07F8                      u101 07F7                      fsr0 0004  
                    indf 0000             __CFG_FOSC$HS 0000             __CFG_LVP$OFF 0000  
                   _main 07A6                     btemp 007E                     start 0000  
                  ?_main 0070            __CFG_WDTE$OFF 0000                    _PORTA 0005  
                  _PORTB 0006                    _PORTC 0007                    _TRISA 0085  
                  _TRISB 0086                    _TRISC 0087            __CFG_PWRTE$ON 0000  
       SetBitLow@byValue 0070                    main@i 007D           __CFG_BOREN$OFF 0000  
                  status 0003                    wtemp0 007E         __end_of_IsBitSet 075E  
        __initialization 07FC             __end_of_main 07FC                   ??_main 007A  
             _SetBitHigh 075E                   _ADCON1 009F                   _SetBit 0785  
     __size_of_SetBitLow 0014      IsBitSet@byBitOffset 0070  __end_of__initialization 07FC  
         __pcstackCOMMON 0070              ?_SetBitHigh 0070                ?_IsBitSet 0070  
      __end_of_SetBitLow 0785                  ?_SetBit 0075               __pmaintext 07A6  
             ??_IsBitSet 0071          __size_of_SetBit 0021      __size_of_SetBitHigh 0013  
                __ptext1 0785                  __ptext2 0771                  __ptext3 075E  
                __ptext4 0751     end_of_initialization 07FC           __end_of_SetBit 07A6  
           ??_SetBitHigh 0073      start_initialization 07FC        __size_of_IsBitSet 000D  
              _SetBitLow 0771     SetBitLow@byBitOffset 0072                 ??_SetBit 0079  
     __end_of_SetBitHigh 0771        SetBit@byBitOffset 0077                ___latbits 0002  
             ?_SetBitLow 0070    SetBitHigh@byBitOffset 0072          IsBitSet@byValue 0072  
               _IsBitSet 0751              ??_SetBitLow 0073         SetBit@byBitValue 0078  
          __size_of_main 0056            SetBit@byValue 0075        SetBitHigh@byValue 0070  
