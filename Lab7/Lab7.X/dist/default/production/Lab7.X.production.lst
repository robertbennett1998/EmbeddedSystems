

Microchip MPLAB XC8 Assembler V2.10 build 88905656 
                                                                                               Fri Oct 18 16:49:33 2019

Microchip MPLAB XC8 C Compiler v2.10 (Free license) build 20190730164152 Og1 
     1                           	processor	16F877A
     2                           	opt	pw 120
     3                           	opt	flic
     4                           	psect	cinit,global,class=CODE,merge=1,delta=2
     5                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
     6                           	psect	maintext,global,class=CODE,split=1,delta=2
     7                           	psect	text1,local,class=CODE,merge=1,delta=2
     8                           	psect	text2,local,class=CODE,merge=1,delta=2
     9                           	psect	text3,local,class=CODE,merge=1,inline,delta=2
    10                           	psect	text4,local,class=CODE,merge=1,delta=2
    11                           	psect	text5,local,class=CODE,merge=1,delta=2
    12                           	psect	text6,local,class=CODE,merge=1,inline,delta=2
    13                           	psect	text7,local,class=CODE,merge=1,inline,delta=2
    14                           	psect	text8,local,class=CODE,merge=1,inline,delta=2
    15                           	psect	text9,local,class=CODE,merge=1,inline,delta=2
    16                           	dabs	1,0x7E,2
    17  0000                     
    18                           ; Version 2.10
    19                           ; Generated 31/07/2019 GMT
    20                           ; 
    21                           ; Copyright Â© 2019, Microchip Technology Inc. and its subsidiaries ("Microchip")
    22                           ; All rights reserved.
    23                           ; 
    24                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    25                           ; 
    26                           ; Redistribution and use in source and binary forms, with or without modification, are
    27                           ; permitted provided that the following conditions are met:
    28                           ; 
    29                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    30                           ;        conditions and the following disclaimer.
    31                           ; 
    32                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    33                           ;        of conditions and the following disclaimer in the documentation and/or other
    34                           ;        materials provided with the distribution.
    35                           ; 
    36                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    37                           ;        software without specific prior written permission.
    38                           ; 
    39                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    40                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    41                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    42                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    43                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    44                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    45                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    46                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    47                           ; 
    48                           ; 
    49                           ; Code-generator required, PIC16F877A Definitions
    50                           ; 
    51                           ; SFR Addresses
    52  0000                     	;# 
    53  0001                     	;# 
    54  0002                     	;# 
    55  0003                     	;# 
    56  0004                     	;# 
    57  0005                     	;# 
    58  0006                     	;# 
    59  0007                     	;# 
    60  0008                     	;# 
    61  0009                     	;# 
    62  000A                     	;# 
    63  000B                     	;# 
    64  000C                     	;# 
    65  000D                     	;# 
    66  000E                     	;# 
    67  000E                     	;# 
    68  000F                     	;# 
    69  0010                     	;# 
    70  0011                     	;# 
    71  0012                     	;# 
    72  0013                     	;# 
    73  0014                     	;# 
    74  0015                     	;# 
    75  0015                     	;# 
    76  0016                     	;# 
    77  0017                     	;# 
    78  0018                     	;# 
    79  0019                     	;# 
    80  001A                     	;# 
    81  001B                     	;# 
    82  001B                     	;# 
    83  001C                     	;# 
    84  001D                     	;# 
    85  001E                     	;# 
    86  001F                     	;# 
    87  0081                     	;# 
    88  0085                     	;# 
    89  0086                     	;# 
    90  0087                     	;# 
    91  0088                     	;# 
    92  0089                     	;# 
    93  008C                     	;# 
    94  008D                     	;# 
    95  008E                     	;# 
    96  0091                     	;# 
    97  0092                     	;# 
    98  0093                     	;# 
    99  0094                     	;# 
   100  0098                     	;# 
   101  0099                     	;# 
   102  009C                     	;# 
   103  009D                     	;# 
   104  009E                     	;# 
   105  009F                     	;# 
   106  010C                     	;# 
   107  010D                     	;# 
   108  010E                     	;# 
   109  010F                     	;# 
   110  018C                     	;# 
   111  018D                     	;# 
   112  0000                     	;# 
   113  0001                     	;# 
   114  0002                     	;# 
   115  0003                     	;# 
   116  0004                     	;# 
   117  0005                     	;# 
   118  0006                     	;# 
   119  0007                     	;# 
   120  0008                     	;# 
   121  0009                     	;# 
   122  000A                     	;# 
   123  000B                     	;# 
   124  000C                     	;# 
   125  000D                     	;# 
   126  000E                     	;# 
   127  000E                     	;# 
   128  000F                     	;# 
   129  0010                     	;# 
   130  0011                     	;# 
   131  0012                     	;# 
   132  0013                     	;# 
   133  0014                     	;# 
   134  0015                     	;# 
   135  0015                     	;# 
   136  0016                     	;# 
   137  0017                     	;# 
   138  0018                     	;# 
   139  0019                     	;# 
   140  001A                     	;# 
   141  001B                     	;# 
   142  001B                     	;# 
   143  001C                     	;# 
   144  001D                     	;# 
   145  001E                     	;# 
   146  001F                     	;# 
   147  0081                     	;# 
   148  0085                     	;# 
   149  0086                     	;# 
   150  0087                     	;# 
   151  0088                     	;# 
   152  0089                     	;# 
   153  008C                     	;# 
   154  008D                     	;# 
   155  008E                     	;# 
   156  0091                     	;# 
   157  0092                     	;# 
   158  0093                     	;# 
   159  0094                     	;# 
   160  0098                     	;# 
   161  0099                     	;# 
   162  009C                     	;# 
   163  009D                     	;# 
   164  009E                     	;# 
   165  009F                     	;# 
   166  010C                     	;# 
   167  010D                     	;# 
   168  010E                     	;# 
   169  010F                     	;# 
   170  018C                     	;# 
   171  018D                     	;# 
   172  0005                     _PORTA	set	5
   173  0006                     _PORTB	set	6
   174  0007                     _PORTC	set	7
   175  0086                     _TRISB	set	134
   176  0085                     _TRISA	set	133
   177  009F                     _ADCON1	set	159
   178  0087                     _TRISC	set	135
   179                           
   180                           ; #config settings
   181  0000                     
   182                           	psect	cinit
   183  07FC                     start_initialization:	
   184  07FC                     __initialization:	
   185  07FC                     end_of_initialization:	
   186                           ;End of C runtime variable initialization code
   187                           
   188  07FC                     __end_of__initialization:	
   189  07FC  0183               	clrf	3
   190  07FD  120A  118A  2FBC   	ljmp	_main	;jump to C main() function
   191                           
   192                           	psect	cstackCOMMON
   193  0070                     __pcstackCOMMON:	
   194  0070                     ?_Initialise:	
   195  0070                     ??_Initialise:	
   196                           ; 1 bytes @ 0x0
   197                           
   198  0070                     ?_SetBitHigh:	
   199                           ; 1 bytes @ 0x0
   200                           
   201  0070                     ?_ClearLowNibble:	
   202                           ; 1 bytes @ 0x0
   203                           
   204  0070                     ?_GetLowNibble:	
   205                           ; 1 bytes @ 0x0
   206                           
   207  0070                     ?_GetHighNibble:	
   208                           ; 1 bytes @ 0x0
   209                           
   210  0070                     ?_SetColumnHigh:	
   211                           ; 1 bytes @ 0x0
   212                           
   213  0070                     ?_ReadMatrixColumn:	
   214                           ; 1 bytes @ 0x0
   215                           
   216  0070                     ?_SetRowHigh:	
   217                           ; 1 bytes @ 0x0
   218                           
   219  0070                     ?_ReadMatrixRow:	
   220                           ; 1 bytes @ 0x0
   221                           
   222  0070                     ?_main:	
   223                           ; 1 bytes @ 0x0
   224                           
   225  0070                     SetBitHigh@byValue:	
   226                           ; 1 bytes @ 0x0
   227                           
   228  0070                     ClearLowNibble@val:	
   229                           ; 2 bytes @ 0x0
   230                           
   231  0070                     GetLowNibble@val:	
   232                           ; 2 bytes @ 0x0
   233                           
   234  0070                     GetHighNibble@val:	
   235                           ; 2 bytes @ 0x0
   236                           
   237                           
   238                           ; 2 bytes @ 0x0
   239  0070                     	ds	2
   240  0072                     ??_ClearLowNibble:	
   241  0072                     ??_GetLowNibble:	
   242                           ; 1 bytes @ 0x2
   243                           
   244  0072                     ??_GetHighNibble:	
   245                           ; 1 bytes @ 0x2
   246                           
   247  0072                     SetBitHigh@byBitOffset:	
   248                           ; 1 bytes @ 0x2
   249                           
   250                           
   251                           ; 1 bytes @ 0x2
   252  0072                     	ds	1
   253  0073                     ??_SetBitHigh:	
   254                           
   255                           ; 1 bytes @ 0x3
   256  0073                     	ds	2
   257  0075                     ??_SetColumnHigh:	
   258  0075                     ??_SetRowHigh:	
   259                           ; 1 bytes @ 0x5
   260                           
   261                           
   262                           ; 1 bytes @ 0x5
   263  0075                     	ds	1
   264  0076                     SetColumnHigh@col:	
   265  0076                     SetRowHigh@row:	
   266                           ; 1 bytes @ 0x6
   267                           
   268                           
   269                           ; 1 bytes @ 0x6
   270  0076                     	ds	1
   271  0077                     ??_ReadMatrixColumn:	
   272  0077                     ??_ReadMatrixRow:	
   273                           ; 1 bytes @ 0x7
   274                           
   275  0077                     ReadMatrixColumn@col:	
   276                           ; 1 bytes @ 0x7
   277                           
   278  0077                     ReadMatrixRow@row:	
   279                           ; 1 bytes @ 0x7
   280                           
   281                           
   282                           ; 1 bytes @ 0x7
   283  0077                     	ds	1
   284  0078                     ??_main:	
   285                           
   286                           ; 1 bytes @ 0x8
   287  0078                     	ds	1
   288  0079                     main@res:	
   289                           
   290                           ; 1 bytes @ 0x9
   291  0079                     	ds	1
   292  007A                     main@i:	
   293                           
   294                           ; 1 bytes @ 0xA
   295  007A                     	ds	1
   296                           
   297                           	psect	maintext
   298  07BC                     __pmaintext:	
   299 ;;
   300 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
   301 ;;
   302 ;; *************** function _main *****************
   303 ;; Defined at:
   304 ;;		line 88 in file "main.c"
   305 ;; Parameters:    Size  Location     Type
   306 ;;		None
   307 ;; Auto vars:     Size  Location     Type
   308 ;;  res             1    9[COMMON] unsigned char 
   309 ;;  i               1   10[COMMON] unsigned char 
   310 ;; Return value:  Size  Location     Type
   311 ;;                  1    wreg      void 
   312 ;; Registers used:
   313 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   314 ;; Tracked objects:
   315 ;;		On entry : B00/0
   316 ;;		On exit  : 0/0
   317 ;;		Unchanged: 0/0
   318 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   319 ;;      Params:         0       0       0       0       0
   320 ;;      Locals:         2       0       0       0       0
   321 ;;      Temps:          1       0       0       0       0
   322 ;;      Totals:         3       0       0       0       0
   323 ;;Total ram usage:        3 bytes
   324 ;; Hardware stack levels required when called:    3
   325 ;; This function calls:
   326 ;;		_Initialise
   327 ;;		_ReadMatrixColumn
   328 ;;		_ReadMatrixRow
   329 ;;		_SetBitHigh
   330 ;; This function is called by:
   331 ;;		Startup code after reset
   332 ;; This function uses a non-reentrant model
   333 ;;
   334                           
   335                           
   336                           ;psect for function _main
   337  07BC                     _main:	
   338  07BC                     l780:	
   339                           ;incstack = 0
   340                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   341                           
   342                           
   343                           ;main.c: 90: 
   344  07BC  120A  118A  2737  120A  118A  	fcall	_Initialise
   345  07C1                     l782:	
   346                           
   347                           ;main.c: 94:             if (PORTA > 0);main.c: 95:                 SetBitHigh(&PORTB, i
      +                          );
   348  07C1  01FA               	clrf	main@i
   349  07C2                     l788:	
   350                           
   351                           ;main.c: 96:         };main.c: 97:     }
   352  07C2  1283               	bcf	3,5	;RP0=0, select bank0
   353  07C3  1303               	bcf	3,6	;RP1=0, select bank0
   354  07C4  0185               	clrf	5	;volatile
   355                           
   356                           ;main.c: 98: 
   357  07C5  0186               	clrf	6	;volatile
   358  07C6                     l790:	
   359                           
   360                           ;main.c: 99:     return;
   361  07C6  087A               	movf	main@i,w
   362  07C7  120A  118A  2773  120A  118A  	fcall	_ReadMatrixColumn
   363  07CC  00F8               	movwf	??_main
   364  07CD  0878               	movf	??_main,w
   365  07CE  00F9               	movwf	main@res
   366  07CF                     l792:	
   367                           
   368                           ;main.c: 101: 
   369  07CF  087A               	movf	main@i,w
   370  07D0  120A  118A  278B  120A  118A  	fcall	_ReadMatrixRow
   371  07D5  00F8               	movwf	??_main
   372  07D6  0878               	movf	??_main,w
   373  07D7  05F9               	andwf	main@res,f
   374  07D8                     l794:	
   375                           
   376                           ;main.c: 102: __attribute__((inline)) void Initialise()
   377  07D8  0879               	movf	main@res,w
   378  07D9  1283               	bcf	3,5	;RP0=0, select bank0
   379  07DA  1303               	bcf	3,6	;RP1=0, select bank0
   380  07DB  0085               	movwf	5	;volatile
   381  07DC                     l796:	
   382                           
   383                           ;main.c: 104: 
   384  07DC  0805               	movf	5,w	;volatile
   385  07DD  1903               	btfsc	3,2
   386  07DE  2FE0               	goto	u91
   387  07DF  2FE1               	goto	u90
   388  07E0                     u91:	
   389  07E0  2FEE               	goto	l800
   390  07E1                     u90:	
   391  07E1                     l798:	
   392                           
   393                           ;main.c: 105:     ADCON1 = 0b00000110;
   394  07E1  3006               	movlw	6
   395  07E2  00F0               	movwf	SetBitHigh@byValue
   396  07E3  3000               	movlw	0
   397  07E4  00F1               	movwf	SetBitHigh@byValue+1
   398  07E5  087A               	movf	main@i,w
   399  07E6  00F8               	movwf	??_main
   400  07E7  0878               	movf	??_main,w
   401  07E8  00F2               	movwf	SetBitHigh@byBitOffset
   402  07E9  120A  118A  2748  120A  118A  	fcall	_SetBitHigh
   403  07EE                     l800:	
   404                           
   405                           ;main.c: 106:     TRISA = 0b11110000;
   406  07EE  3001               	movlw	1
   407  07EF  00F8               	movwf	??_main
   408  07F0  0878               	movf	??_main,w
   409  07F1  07FA               	addwf	main@i,f
   410  07F2                     l802:	
   411  07F2  3004               	movlw	4
   412  07F3  027A               	subwf	main@i,w
   413  07F4  1C03               	skipc
   414  07F5  2FF7               	goto	u101
   415  07F6  2FF8               	goto	u100
   416  07F7                     u101:	
   417  07F7  2FC2               	goto	l788
   418  07F8                     u100:	
   419  07F8  2FC1               	goto	l782
   420  07F9  120A  118A  2800   	ljmp	start
   421  07FC                     __end_of_main:	
   422                           
   423                           	psect	text1
   424  078B                     __ptext1:	
   425 ;; *************** function _ReadMatrixRow *****************
   426 ;; Defined at:
   427 ;;		line 79 in file "main.c"
   428 ;; Parameters:    Size  Location     Type
   429 ;;  row             1    wreg     unsigned char 
   430 ;; Auto vars:     Size  Location     Type
   431 ;;  row             1    7[COMMON] unsigned char 
   432 ;; Return value:  Size  Location     Type
   433 ;;                  1    wreg      unsigned char 
   434 ;; Registers used:
   435 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   436 ;; Tracked objects:
   437 ;;		On entry : 0/0
   438 ;;		On exit  : 0/0
   439 ;;		Unchanged: 0/0
   440 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   441 ;;      Params:         0       0       0       0       0
   442 ;;      Locals:         1       0       0       0       0
   443 ;;      Temps:          0       0       0       0       0
   444 ;;      Totals:         1       0       0       0       0
   445 ;;Total ram usage:        1 bytes
   446 ;; Hardware stack levels used:    1
   447 ;; Hardware stack levels required when called:    2
   448 ;; This function calls:
   449 ;;		_GetLowNibble
   450 ;;		_SetRowHigh
   451 ;; This function is called by:
   452 ;;		_main
   453 ;; This function uses a non-reentrant model
   454 ;;
   455                           
   456                           
   457                           ;psect for function _ReadMatrixRow
   458  078B                     _ReadMatrixRow:	
   459                           
   460                           ;incstack = 0
   461                           ; Regs used in _ReadMatrixRow: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   462                           ;ReadMatrixRow@row stored from wreg
   463  078B  00F7               	movwf	ReadMatrixRow@row
   464  078C                     l764:	
   465                           
   466                           ;main.c: 79: {;main.c: 80:     Initialise();;main.c: 81: 
   467  078C  1283               	bcf	3,5	;RP0=0, select bank0
   468  078D  1303               	bcf	3,6	;RP1=0, select bank0
   469  078E  0187               	clrf	7	;volatile
   470  078F                     l766:	
   471                           
   472                           ;main.c: 82:     uchar i;
   473  078F  300F               	movlw	15
   474  0790  1683               	bsf	3,5	;RP0=1, select bank1
   475  0791  1303               	bcf	3,6	;RP1=0, select bank1
   476  0792  0087               	movwf	7	;volatile
   477  0793                     l768:	
   478                           
   479                           ;main.c: 83:     while (1)
   480  0793  0877               	movf	ReadMatrixRow@row,w
   481  0794  120A  118A  27A3  120A  118A  	fcall	_SetRowHigh
   482  0799                     l770:	
   483                           
   484                           ;main.c: 84:     {
   485  0799  3007               	movlw	7
   486  079A  00F0               	movwf	GetLowNibble@val
   487  079B  3000               	movlw	0
   488  079C  00F1               	movwf	GetLowNibble@val+1
   489  079D  120A  118A  270F  120A  118A  	fcall	_GetLowNibble
   490  07A2                     l54:	
   491  07A2  0008               	return
   492  07A3                     __end_of_ReadMatrixRow:	
   493                           
   494                           	psect	text2
   495  07A3                     __ptext2:	
   496 ;; *************** function _SetRowHigh *****************
   497 ;; Defined at:
   498 ;;		line 73 in file "main.c"
   499 ;; Parameters:    Size  Location     Type
   500 ;;  row             1    wreg     unsigned char 
   501 ;; Auto vars:     Size  Location     Type
   502 ;;  row             1    6[COMMON] unsigned char 
   503 ;; Return value:  Size  Location     Type
   504 ;;                  1    wreg      void 
   505 ;; Registers used:
   506 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   507 ;; Tracked objects:
   508 ;;		On entry : 0/0
   509 ;;		On exit  : 0/0
   510 ;;		Unchanged: 0/0
   511 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   512 ;;      Params:         0       0       0       0       0
   513 ;;      Locals:         1       0       0       0       0
   514 ;;      Temps:          1       0       0       0       0
   515 ;;      Totals:         2       0       0       0       0
   516 ;;Total ram usage:        2 bytes
   517 ;; Hardware stack levels used:    1
   518 ;; Hardware stack levels required when called:    1
   519 ;; This function calls:
   520 ;;		_ClearLowNibble
   521 ;;		_SetBitHigh
   522 ;; This function is called by:
   523 ;;		_ReadMatrixRow
   524 ;; This function uses a non-reentrant model
   525 ;;
   526                           
   527                           
   528                           ;psect for function _SetRowHigh
   529  07A3                     _SetRowHigh:	
   530                           
   531                           ;incstack = 0
   532                           ; Regs used in _SetRowHigh: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   533                           ;SetRowHigh@row stored from wreg
   534  07A3  00F6               	movwf	SetRowHigh@row
   535  07A4                     l752:	
   536                           
   537                           ;main.c: 73:     SetRowHigh(row);;main.c: 74:     return GetLowNibble(&PORTC);;main.c: 7
      +                          5: }
   538  07A4  3007               	movlw	7
   539  07A5  00F0               	movwf	ClearLowNibble@val
   540  07A6  3000               	movlw	0
   541  07A7  00F1               	movwf	ClearLowNibble@val+1
   542  07A8  120A  118A  2727  120A  118A  	fcall	_ClearLowNibble
   543                           
   544                           ;main.c: 76: 
   545  07AD  3007               	movlw	7
   546  07AE  00F0               	movwf	SetBitHigh@byValue
   547  07AF  3000               	movlw	0
   548  07B0  00F1               	movwf	SetBitHigh@byValue+1
   549  07B1  0876               	movf	SetRowHigh@row,w
   550  07B2  3E04               	addlw	4
   551  07B3  00F5               	movwf	??_SetRowHigh
   552  07B4  0875               	movf	??_SetRowHigh,w
   553  07B5  00F2               	movwf	SetBitHigh@byBitOffset
   554  07B6  120A  118A  2748  120A  118A  	fcall	_SetBitHigh
   555  07BB                     l51:	
   556  07BB  0008               	return
   557  07BC                     __end_of_SetRowHigh:	
   558                           
   559                           	psect	text3
   560  070F                     __ptext3:	
   561 ;; *************** function _GetLowNibble *****************
   562 ;; Defined at:
   563 ;;		line 49 in file "main.c"
   564 ;; Parameters:    Size  Location     Type
   565 ;;  val             2    0[COMMON] PTR unsigned char 
   566 ;;		 -> PORTC(1), 
   567 ;; Auto vars:     Size  Location     Type
   568 ;;		None
   569 ;; Return value:  Size  Location     Type
   570 ;;                  1    wreg      unsigned char 
   571 ;; Registers used:
   572 ;;		wreg, fsr0l, fsr0h, status,2
   573 ;; Tracked objects:
   574 ;;		On entry : 0/0
   575 ;;		On exit  : 0/0
   576 ;;		Unchanged: 0/0
   577 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   578 ;;      Params:         2       0       0       0       0
   579 ;;      Locals:         0       0       0       0       0
   580 ;;      Temps:          0       0       0       0       0
   581 ;;      Totals:         2       0       0       0       0
   582 ;;Total ram usage:        2 bytes
   583 ;; Hardware stack levels used:    1
   584 ;; This function calls:
   585 ;;		Nothing
   586 ;; This function is called by:
   587 ;;		_ReadMatrixRow
   588 ;; This function uses a non-reentrant model
   589 ;;
   590                           
   591                           
   592                           ;psect for function _GetLowNibble
   593  070F                     _GetLowNibble:	
   594  070F                     l742:	
   595                           ;incstack = 0
   596                           ; Regs used in _GetLowNibble: [wreg-fsr0h+status,2]
   597                           
   598                           
   599                           ;main.c: 49: void SetColumnHigh(uchar col);main.c: 50: {;main.c: 51:     ClearLowNibble(
      +                          &PORTC);
   600  070F  0870               	movf	GetLowNibble@val,w
   601  0710  0084               	movwf	4
   602  0711  1783               	bsf	3,7
   603  0712  1C71               	btfss	GetLowNibble@val+1,0
   604  0713  1383               	bcf	3,7
   605  0714  0800               	movf	0,w
   606  0715  39F0               	andlw	240
   607  0716                     l39:	
   608  0716  0008               	return
   609  0717                     __end_of_GetLowNibble:	
   610                           
   611                           	psect	text4
   612  0773                     __ptext4:	
   613 ;; *************** function _ReadMatrixColumn *****************
   614 ;; Defined at:
   615 ;;		line 65 in file "main.c"
   616 ;; Parameters:    Size  Location     Type
   617 ;;  col             1    wreg     unsigned char 
   618 ;; Auto vars:     Size  Location     Type
   619 ;;  col             1    7[COMMON] unsigned char 
   620 ;; Return value:  Size  Location     Type
   621 ;;                  1    wreg      unsigned char 
   622 ;; Registers used:
   623 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   624 ;; Tracked objects:
   625 ;;		On entry : 0/0
   626 ;;		On exit  : 0/0
   627 ;;		Unchanged: 0/0
   628 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   629 ;;      Params:         0       0       0       0       0
   630 ;;      Locals:         1       0       0       0       0
   631 ;;      Temps:          0       0       0       0       0
   632 ;;      Totals:         1       0       0       0       0
   633 ;;Total ram usage:        1 bytes
   634 ;; Hardware stack levels used:    1
   635 ;; Hardware stack levels required when called:    2
   636 ;; This function calls:
   637 ;;		_GetHighNibble
   638 ;;		_SetColumnHigh
   639 ;; This function is called by:
   640 ;;		_main
   641 ;; This function uses a non-reentrant model
   642 ;;
   643                           
   644                           
   645                           ;psect for function _ReadMatrixColumn
   646  0773                     _ReadMatrixColumn:	
   647                           
   648                           ;incstack = 0
   649                           ; Regs used in _ReadMatrixColumn: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   650                           ;ReadMatrixColumn@col stored from wreg
   651  0773  00F7               	movwf	ReadMatrixColumn@col
   652  0774                     l754:	
   653                           
   654                           ;main.c: 65:     ClearLowNibble(&PORTC);;main.c: 66:     SetBitHigh(&PORTC, row + 4);;ma
      +                          in.c: 67: }
   655  0774  1283               	bcf	3,5	;RP0=0, select bank0
   656  0775  1303               	bcf	3,6	;RP1=0, select bank0
   657  0776  0187               	clrf	7	;volatile
   658  0777                     l756:	
   659                           
   660                           ;main.c: 68: 
   661  0777  30F0               	movlw	240
   662  0778  1683               	bsf	3,5	;RP0=1, select bank1
   663  0779  1303               	bcf	3,6	;RP1=0, select bank1
   664  077A  0087               	movwf	7	;volatile
   665  077B                     l758:	
   666                           
   667                           ;main.c: 69: uchar ReadMatrixRow(uchar row)
   668  077B  0877               	movf	ReadMatrixColumn@col,w
   669  077C  120A  118A  275B  120A  118A  	fcall	_SetColumnHigh
   670  0781                     l760:	
   671                           
   672                           ;main.c: 70: {
   673  0781  3007               	movlw	7
   674  0782  00F0               	movwf	GetHighNibble@val
   675  0783  3000               	movlw	0
   676  0784  00F1               	movwf	GetHighNibble@val+1
   677  0785  120A  118A  2717  120A  118A  	fcall	_GetHighNibble
   678  078A                     l48:	
   679  078A  0008               	return
   680  078B                     __end_of_ReadMatrixColumn:	
   681                           
   682                           	psect	text5
   683  075B                     __ptext5:	
   684 ;; *************** function _SetColumnHigh *****************
   685 ;; Defined at:
   686 ;;		line 59 in file "main.c"
   687 ;; Parameters:    Size  Location     Type
   688 ;;  col             1    wreg     unsigned char 
   689 ;; Auto vars:     Size  Location     Type
   690 ;;  col             1    6[COMMON] unsigned char 
   691 ;; Return value:  Size  Location     Type
   692 ;;                  1    wreg      void 
   693 ;; Registers used:
   694 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   695 ;; Tracked objects:
   696 ;;		On entry : 0/0
   697 ;;		On exit  : 0/0
   698 ;;		Unchanged: 0/0
   699 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   700 ;;      Params:         0       0       0       0       0
   701 ;;      Locals:         1       0       0       0       0
   702 ;;      Temps:          1       0       0       0       0
   703 ;;      Totals:         2       0       0       0       0
   704 ;;Total ram usage:        2 bytes
   705 ;; Hardware stack levels used:    1
   706 ;; Hardware stack levels required when called:    1
   707 ;; This function calls:
   708 ;;		_ClearLowNibble
   709 ;;		_SetBitHigh
   710 ;; This function is called by:
   711 ;;		_ReadMatrixColumn
   712 ;; This function uses a non-reentrant model
   713 ;;
   714                           
   715                           
   716                           ;psect for function _SetColumnHigh
   717  075B                     _SetColumnHigh:	
   718                           
   719                           ;incstack = 0
   720                           ; Regs used in _SetColumnHigh: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   721                           ;SetColumnHigh@col stored from wreg
   722  075B  00F6               	movwf	SetColumnHigh@col
   723  075C                     l750:	
   724                           
   725                           ;main.c: 59:     SetColumnHigh(col);;main.c: 60:     return GetHighNibble(&PORTC);;main.
      +                          c: 61: }
   726  075C  3007               	movlw	7
   727  075D  00F0               	movwf	ClearLowNibble@val
   728  075E  3000               	movlw	0
   729  075F  00F1               	movwf	ClearLowNibble@val+1
   730  0760  120A  118A  2727  120A  118A  	fcall	_ClearLowNibble
   731                           
   732                           ;main.c: 62: 
   733  0765  3007               	movlw	7
   734  0766  00F0               	movwf	SetBitHigh@byValue
   735  0767  3000               	movlw	0
   736  0768  00F1               	movwf	SetBitHigh@byValue+1
   737  0769  0876               	movf	SetColumnHigh@col,w
   738  076A  00F5               	movwf	??_SetColumnHigh
   739  076B  0875               	movf	??_SetColumnHigh,w
   740  076C  00F2               	movwf	SetBitHigh@byBitOffset
   741  076D  120A  118A  2748  120A  118A  	fcall	_SetBitHigh
   742  0772                     l45:	
   743  0772  0008               	return
   744  0773                     __end_of_SetColumnHigh:	
   745                           
   746                           	psect	text6
   747  0748                     __ptext6:	
   748 ;; *************** function _SetBitHigh *****************
   749 ;; Defined at:
   750 ;;		line 16 in file "main.c"
   751 ;; Parameters:    Size  Location     Type
   752 ;;  byValue         2    0[COMMON] PTR unsigned char 
   753 ;;		 -> PORTB(1), PORTC(1), 
   754 ;;  byBitOffset     1    2[COMMON] unsigned char 
   755 ;; Auto vars:     Size  Location     Type
   756 ;;		None
   757 ;; Return value:  Size  Location     Type
   758 ;;                  1    wreg      void 
   759 ;; Registers used:
   760 ;;		wreg, fsr0l, fsr0h, status,2, status,0
   761 ;; Tracked objects:
   762 ;;		On entry : 0/0
   763 ;;		On exit  : 0/0
   764 ;;		Unchanged: 0/0
   765 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   766 ;;      Params:         3       0       0       0       0
   767 ;;      Locals:         0       0       0       0       0
   768 ;;      Temps:          2       0       0       0       0
   769 ;;      Totals:         5       0       0       0       0
   770 ;;Total ram usage:        5 bytes
   771 ;; Hardware stack levels used:    1
   772 ;; This function calls:
   773 ;;		Nothing
   774 ;; This function is called by:
   775 ;;		_SetColumnHigh
   776 ;;		_SetRowHigh
   777 ;;		_main
   778 ;;		_SetBit
   779 ;; This function uses a non-reentrant model
   780 ;;
   781                           
   782                           
   783                           ;psect for function _SetBitHigh
   784  0748                     _SetBitHigh:	
   785  0748                     l738:	
   786                           ;incstack = 0
   787                           ; Regs used in _SetBitHigh: [wreg-fsr0h+status,2+status,0]
   788                           
   789                           
   790                           ;main.c: 16: __attribute__((inline)) void SetBit(uchar* byValue, uchar byBitOffset, ucha
      +                          r byBitValue);main.c: 17: {;main.c: 18:     if (byBitValue > 0)
   791  0748  3001               	movlw	1
   792  0749  00F3               	movwf	??_SetBitHigh
   793  074A  0A72               	incf	SetBitHigh@byBitOffset,w
   794  074B  2F4E               	goto	u64
   795  074C                     u65:	
   796  074C  1003               	clrc
   797  074D  0DF3               	rlf	??_SetBitHigh,f
   798  074E                     u64:	
   799  074E  3EFF               	addlw	-1
   800  074F  1D03               	skipz
   801  0750  2F4C               	goto	u65
   802  0751  0873               	movf	??_SetBitHigh,w
   803  0752  00F4               	movwf	??_SetBitHigh+1
   804  0753  0870               	movf	SetBitHigh@byValue,w
   805  0754  0084               	movwf	4
   806  0755  1783               	bsf	3,7
   807  0756  1C71               	btfss	SetBitHigh@byValue+1,0
   808  0757  1383               	bcf	3,7
   809  0758  0874               	movf	??_SetBitHigh+1,w
   810  0759  0480               	iorwf	0,f
   811  075A                     l19:	
   812  075A  0008               	return
   813  075B                     __end_of_SetBitHigh:	
   814                           
   815                           	psect	text7
   816  0727                     __ptext7:	
   817 ;; *************** function _ClearLowNibble *****************
   818 ;; Defined at:
   819 ;;		line 39 in file "main.c"
   820 ;; Parameters:    Size  Location     Type
   821 ;;  val             2    0[COMMON] PTR unsigned char 
   822 ;;		 -> PORTC(1), 
   823 ;; Auto vars:     Size  Location     Type
   824 ;;		None
   825 ;; Return value:  Size  Location     Type
   826 ;;                  1    wreg      void 
   827 ;; Registers used:
   828 ;;		wreg, fsr0l, fsr0h, status,2
   829 ;; Tracked objects:
   830 ;;		On entry : 0/0
   831 ;;		On exit  : 0/0
   832 ;;		Unchanged: 0/0
   833 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   834 ;;      Params:         2       0       0       0       0
   835 ;;      Locals:         0       0       0       0       0
   836 ;;      Temps:          1       0       0       0       0
   837 ;;      Totals:         3       0       0       0       0
   838 ;;Total ram usage:        3 bytes
   839 ;; Hardware stack levels used:    1
   840 ;; This function calls:
   841 ;;		Nothing
   842 ;; This function is called by:
   843 ;;		_SetColumnHigh
   844 ;;		_SetRowHigh
   845 ;; This function uses a non-reentrant model
   846 ;;
   847                           
   848                           
   849                           ;psect for function _ClearLowNibble
   850  0727                     _ClearLowNibble:	
   851  0727                     l740:	
   852                           ;incstack = 0
   853                           ; Regs used in _ClearLowNibble: [wreg-fsr0h+status,2]
   854                           
   855                           
   856                           ;main.c: 39: __attribute__((inline)) uchar GetLowNibble(uchar* val);main.c: 40: {;main.c
      +                          : 41:     return *val & 0xF0;
   857  0727  0870               	movf	ClearLowNibble@val,w
   858  0728  0084               	movwf	4
   859  0729  1783               	bsf	3,7
   860  072A  1C71               	btfss	ClearLowNibble@val+1,0
   861  072B  1383               	bcf	3,7
   862  072C  0800               	movf	0,w
   863  072D  39F0               	andlw	240
   864  072E  00F2               	movwf	??_ClearLowNibble
   865  072F  0870               	movf	ClearLowNibble@val,w
   866  0730  0084               	movwf	4
   867  0731  1783               	bsf	3,7
   868  0732  1C71               	btfss	ClearLowNibble@val+1,0
   869  0733  1383               	bcf	3,7
   870  0734  0872               	movf	??_ClearLowNibble,w
   871  0735  0080               	movwf	0
   872  0736                     l33:	
   873  0736  0008               	return
   874  0737                     __end_of_ClearLowNibble:	
   875                           
   876                           	psect	text8
   877  0717                     __ptext8:	
   878 ;; *************** function _GetHighNibble *****************
   879 ;; Defined at:
   880 ;;		line 54 in file "main.c"
   881 ;; Parameters:    Size  Location     Type
   882 ;;  val             2    0[COMMON] PTR unsigned char 
   883 ;;		 -> PORTC(1), 
   884 ;; Auto vars:     Size  Location     Type
   885 ;;		None
   886 ;; Return value:  Size  Location     Type
   887 ;;                  1    wreg      unsigned char 
   888 ;; Registers used:
   889 ;;		wreg, fsr0l, fsr0h, status,2, status,0
   890 ;; Tracked objects:
   891 ;;		On entry : 0/0
   892 ;;		On exit  : 0/0
   893 ;;		Unchanged: 0/0
   894 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   895 ;;      Params:         2       0       0       0       0
   896 ;;      Locals:         0       0       0       0       0
   897 ;;      Temps:          1       0       0       0       0
   898 ;;      Totals:         3       0       0       0       0
   899 ;;Total ram usage:        3 bytes
   900 ;; Hardware stack levels used:    1
   901 ;; This function calls:
   902 ;;		Nothing
   903 ;; This function is called by:
   904 ;;		_ReadMatrixColumn
   905 ;; This function uses a non-reentrant model
   906 ;;
   907                           
   908                           
   909                           ;psect for function _GetHighNibble
   910  0717                     _GetHighNibble:	
   911  0717                     l746:	
   912                           ;incstack = 0
   913                           ; Regs used in _GetHighNibble: [wreg-fsr0h+status,2+status,0]
   914                           
   915                           
   916                           ;main.c: 54: ;main.c: 55: uchar ReadMatrixColumn(uchar col);main.c: 56: {
   917  0717  0870               	movf	GetHighNibble@val,w
   918  0718  0084               	movwf	4
   919  0719  1783               	bsf	3,7
   920  071A  1C71               	btfss	GetHighNibble@val+1,0
   921  071B  1383               	bcf	3,7
   922  071C  0800               	movf	0,w
   923  071D  00F2               	movwf	??_GetHighNibble
   924  071E  3004               	movlw	4
   925  071F                     u75:	
   926  071F  1003               	clrc
   927  0720  0CF2               	rrf	??_GetHighNibble,f
   928  0721  3EFF               	addlw	-1
   929  0722  1D03               	skipz
   930  0723  2F1F               	goto	u75
   931  0724  0872               	movf	??_GetHighNibble,w
   932  0725  390F               	andlw	15
   933  0726                     l42:	
   934  0726  0008               	return
   935  0727                     __end_of_GetHighNibble:	
   936                           
   937                           	psect	text9
   938  0737                     __ptext9:	
   939 ;; *************** function _Initialise *****************
   940 ;; Defined at:
   941 ;;		line 112 in file "main.c"
   942 ;; Parameters:    Size  Location     Type
   943 ;;		None
   944 ;; Auto vars:     Size  Location     Type
   945 ;;		None
   946 ;; Return value:  Size  Location     Type
   947 ;;                  1    wreg      void 
   948 ;; Registers used:
   949 ;;		wreg, status,2
   950 ;; Tracked objects:
   951 ;;		On entry : 0/0
   952 ;;		On exit  : 0/0
   953 ;;		Unchanged: 0/0
   954 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   955 ;;      Params:         0       0       0       0       0
   956 ;;      Locals:         0       0       0       0       0
   957 ;;      Temps:          0       0       0       0       0
   958 ;;      Totals:         0       0       0       0       0
   959 ;;Total ram usage:        0 bytes
   960 ;; Hardware stack levels used:    1
   961 ;; This function calls:
   962 ;;		Nothing
   963 ;; This function is called by:
   964 ;;		_main
   965 ;; This function uses a non-reentrant model
   966 ;;
   967                           
   968                           
   969                           ;psect for function _Initialise
   970  0737                     _Initialise:	
   971  0737                     l696:	
   972                           ;incstack = 0
   973                           ; Regs used in _Initialise: [wreg+status,2]
   974                           
   975  0737  3006               	movlw	6
   976  0738  1683               	bsf	3,5	;RP0=1, select bank1
   977  0739  1303               	bcf	3,6	;RP1=0, select bank1
   978  073A  009F               	movwf	31	;volatile
   979  073B  30F0               	movlw	240
   980  073C  0085               	movwf	5	;volatile
   981  073D  30F0               	movlw	240
   982  073E  0086               	movwf	6	;volatile
   983  073F  30F0               	movlw	240
   984  0740  0087               	movwf	7	;volatile
   985  0741                     l698:	
   986  0741  0185               	clrf	5	;volatile
   987  0742                     l700:	
   988  0742  1283               	bcf	3,5	;RP0=0, select bank0
   989  0743  1303               	bcf	3,6	;RP1=0, select bank0
   990  0744  0185               	clrf	5	;volatile
   991  0745                     l702:	
   992  0745  0186               	clrf	6	;volatile
   993  0746                     l704:	
   994  0746  0187               	clrf	7	;volatile
   995  0747                     l68:	
   996  0747  0008               	return
   997  0748                     __end_of_Initialise:	
   998  007E                     btemp	set	126	;btemp
   999  007E                     wtemp0	set	126


Data Sizes:
    Strings     0
    Constant    0
    Data        0
    BSS         0
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     11      11
    BANK0            80      0       0
    BANK1            80      0       0
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    GetHighNibble@val	PTR unsigned char  size(2) Largest target is 1
		 -> PORTC(SFR0[1]), 

    GetLowNibble@val	PTR unsigned char  size(2) Largest target is 1
		 -> PORTC(SFR0[1]), 

    ClearLowNibble@val	PTR unsigned char  size(2) Largest target is 1
		 -> PORTC(SFR0[1]), 

    SetBitHigh@byValue	PTR unsigned char  size(2) Largest target is 1
		 -> PORTB(SFR0[1]), PORTC(SFR0[1]), 


Critical Paths under _main in COMMON

    _main->_ReadMatrixColumn
    _main->_ReadMatrixRow
    _ReadMatrixRow->_SetRowHigh
    _SetRowHigh->_SetBitHigh
    _ReadMatrixColumn->_SetColumnHigh
    _SetColumnHigh->_SetBitHigh

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 3     3      0    2768
                                              8 COMMON     3     3      0
                         _Initialise
                   _ReadMatrixColumn
                      _ReadMatrixRow
                         _SetBitHigh
 ---------------------------------------------------------------------------------
 (1) _ReadMatrixRow                                        1     1      0     990
                                              7 COMMON     1     1      0
                       _GetLowNibble
                         _SetRowHigh
 ---------------------------------------------------------------------------------
 (2) _SetRowHigh                                           2     2      0     870
                                              5 COMMON     2     2      0
                     _ClearLowNibble
                         _SetBitHigh
 ---------------------------------------------------------------------------------
 (2) _GetLowNibble                                         2     0      2      98
                                              0 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (1) _ReadMatrixColumn                                     1     1      0     990
                                              7 COMMON     1     1      0
                      _GetHighNibble
                      _SetColumnHigh
 ---------------------------------------------------------------------------------
 (2) _SetColumnHigh                                        2     2      0     870
                                              5 COMMON     2     2      0
                     _ClearLowNibble
                         _SetBitHigh
 ---------------------------------------------------------------------------------
 (1) _SetBitHigh                                           5     2      3     652
                                              0 COMMON     5     2      3
 ---------------------------------------------------------------------------------
 (3) _ClearLowNibble                                       3     1      2     196
                                              0 COMMON     3     1      2
 ---------------------------------------------------------------------------------
 (2) _GetHighNibble                                        3     1      2      98
                                              0 COMMON     3     1      2
 ---------------------------------------------------------------------------------
 (1) _Initialise                                           0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Initialise
   _ReadMatrixColumn
     _GetHighNibble
     _SetColumnHigh
       _ClearLowNibble
       _SetBitHigh
   _ReadMatrixRow
     _GetLowNibble
     _SetRowHigh
       _ClearLowNibble
       _SetBitHigh
   _SetBitHigh

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      B       B       1       78.6%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
ABS                  0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
SFR2                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BANK1               50      0       0       7        0.0%
BITBANK3            60      0       0       8        0.0%
BANK3               60      0       0       9        0.0%
BITBANK2            60      0       0      10        0.0%
BANK2               60      0       0      11        0.0%
DATA                 0      0       0      12        0.0%


Microchip Technology PIC Macro Assembler V2.10 build 88905656 
Symbol Table                                                                                   Fri Oct 18 16:49:33 2019

                       l33 0736                         l42 0726                         l19 075A  
                       l51 07BB                         l45 0772                         l54 07A2  
                       l39 0716                         l48 078A                         l68 0747  
                       u64 074E                         u65 074C                         u90 07E1  
                       u75 071F                         u91 07E0                        l700 0742  
                      l702 0745                        l704 0746                        l800 07EE  
                      l802 07F2                        l740 0727                        l750 075C  
                      l742 070F                        l760 0781                        l752 07A4  
                      l746 0717                        l738 0748                        l754 0774  
                      l770 0799                        l756 0777                        l764 078C  
                      l780 07BC                        l758 077B                        l766 078F  
                      l790 07C6                        l782 07C1                        l696 0737  
                      l768 0793                        l792 07CF                        l698 0741  
                      l794 07D8                        l796 07DC                        l788 07C2  
                      l798 07E1                        u100 07F8                        u101 07F7  
                      fsr0 0004                        indf 0000           SetColumnHigh@col 0076  
             __CFG_FOSC$HS 0000          ClearLowNibble@val 0070               __CFG_LVP$OFF 0000  
          ?_ClearLowNibble 0070                       _main 07BC                       btemp 007E  
                     start 0000      __end_of_GetHighNibble 0727       __end_of_GetLowNibble 0717  
                    ?_main 0070              __CFG_WDTE$OFF 0000                      _PORTA 0005  
                    _PORTB 0006                      _PORTC 0007                      _TRISA 0085  
                    _TRISB 0086                      _TRISC 0087              _ReadMatrixRow 078B  
            __CFG_PWRTE$ON 0000                      main@i 007A             __CFG_BOREN$OFF 0000  
                    status 0003                      wtemp0 007E            __initialization 07FC  
             __end_of_main 07FC                 _Initialise 0737                     ??_main 0078  
           ?_ReadMatrixRow 0070                 _SetBitHigh 0748                     _ADCON1 009F  
               _SetRowHigh 07A3              SetRowHigh@row 0076    __end_of__initialization 07FC  
    __size_of_GetLowNibble 0008          ?_ReadMatrixColumn 0070         ??_ReadMatrixColumn 0077  
   __size_of_SetColumnHigh 0018             __pcstackCOMMON 0070                ?_Initialise 0070  
          ??_ReadMatrixRow 0077                ?_SetBitHigh 0070           ??_ClearLowNibble 0072  
             _GetLowNibble 070F                ?_SetRowHigh 0070                 __pmaintext 07BC  
            _SetColumnHigh 075B        ReadMatrixColumn@col 0077        __size_of_Initialise 0011  
      __size_of_SetBitHigh 0013                    __ptext1 078B                    __ptext2 07A3  
                  __ptext3 070F                    __ptext4 0773                    __ptext5 075B  
                  __ptext6 0748                    __ptext7 0727                    __ptext8 0717  
                  __ptext9 0737        __size_of_SetRowHigh 0019             ?_SetColumnHigh 0070  
   __size_of_GetHighNibble 0010                    main@res 0079       end_of_initialization 07FC  
            _GetHighNibble 0717               ??_Initialise 0070            ??_SetColumnHigh 0075  
__size_of_ReadMatrixColumn 0018               ??_SetBitHigh 0073        start_initialization 07FC  
             ??_SetRowHigh 0075         __end_of_Initialise 0748             ?_GetHighNibble 0070  
       __end_of_SetBitHigh 075B      __end_of_ReadMatrixRow 07A3         __end_of_SetRowHigh 07BC  
                ___latbits 0002           GetHighNibble@val 0070      SetBitHigh@byBitOffset 0072  
         ReadMatrixRow@row 0077            ??_GetHighNibble 0072    __size_of_ClearLowNibble 0010  
         _ReadMatrixColumn 0773              ?_GetLowNibble 0070              __size_of_main 0040  
    __end_of_SetColumnHigh 0773             ??_GetLowNibble 0072             _ClearLowNibble 0727  
        SetBitHigh@byValue 0070            GetLowNibble@val 0070     __end_of_ClearLowNibble 0737  
 __end_of_ReadMatrixColumn 078B     __size_of_ReadMatrixRow 0018  
